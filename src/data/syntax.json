[
  {
    "symbol": "“",
    "id": "begin-string",
    "name": "Begin String Literal",
    "keywords": ["literal", "string", "begin", "list", "compressed", "compression", "integer", "dictionary", "base250", "open"],
    "tags": ["literal", "string", "number", "array"],
    "tagline": "Begin a string literal. String literals can be terminated with various characters that change the decoding of the string.",
    "description": "The following characters exist as string terminators:</p><ul class='larger-text'><li><a href='/syntax/end-string'><code>”</code> (String Literal Terminator)</a></li><li><a href='/syntax/unmapped-terminator'><code>«</code> (Unmapped String Literal Terminator)</a></li><li><a href='/syntax/dictionary-compressed-string'><code>»</code> (Dictionary-Compressed String Terminator)</a></li><li><a href='/syntax/codepage-index-list'><code>‘</code> (Codepage Index List Terminator)</a></li><li><a href='/syntax/end-base-250-number'><code>’</code> (Base 250 Number Terminator)</a></li></ul><p>If another <code>“</code> is encountered while scanning a string literal, the literal becomes a list, and each subsection divided by <code>“</code>s is evaluated according to the string terminator. If the end of the file is reached before the string is closed, it is automatically terminated with <code>”</code>."
  },
  {
    "symbol": "”",
    "id": "end-string",
    "name": "String Literal Terminator",
    "keywords": ["literal", "string", "end", "terminator", "plain", "normal", "close"],
    "tags": ["literal", "string"],
    "tagline": "Terminate a regular string literal. Simply return the characters in the string as-is.",
    "description": "Also see <a href='/syntax/begin-string'><code>“</code> (Begin String Literal)</a>."
  },
  {
    "symbol": "«",
    "id": "unmapped-terminator",
    "name": "Unmapped String Literal Terminator",
    "keywords": ["literal", "string", "end", "terminator", "unmapped", "undefined", "unimplemented", "close"],
    "tags": ["literal", "string"],
    "tagline": "This is reserved as a string terminator but doesn't have a defined behavior yet. It happens to work just like <a href='/syntax/end-string'><code>”</code> (String Literal Terminator)</a>.",
    "description": "Also see <a href='/syntax/begin-string'><code>“</code> (Begin String Literal)</a>."
  },
  {
    "symbol": "»",
    "id": "dictionary-compressed-string",
    "name": "Dictionary-Compressed String Terminator",
    "keywords": ["literal", "string", "terminator", "dictionary", "compressed", "compression", "close"],
    "tags": ["literal", "string"],
    "tagline": "Terminate a dictionary-compressed string.",
    "description": "Rather than being evaluated literally, the characters are converted into a base-250 integer and converted to a string using Jelly's decompression function, <a href='https://github.com/DennisMitchell/jellylanguage/blob/master/jelly/interpreter.py#L1055'><code>sss</code></a>. You can convert strings to their compressed form using the <a href='/misc/string-compressor'>online tool</a>, which also explains the compression/decompression algorithm. For example, <a href='/tio#WyIiLCLigJwz4biFYcSXO8WTwrsiLCIiLCIiLFtdXQ=='><code>“3ḅaė;œ»</code></a> evaluates to <code>Hello, World!</code> and <a href='/tio#WyIiLCLigJzCvcSL4bmtNiDhu7TigJzDkSfIrzZKxpMzwrsgWSIsIiIsIiIsW11d'><code>“½ċṭ6 Ỵ“Ñ'ȯ6JƓ3»</code></a> evaluates to <code>[\"caird coinheringaahing\", \"Coding Challenges\"]</code>."
  },
  {
    "symbol": "‘",
    "id": "codepage-index-list",
    "name": "Codepage Index List Terminator",
    "keywords": ["literal", "terminator", "codepage", "index", "list", "close"],
    "tags": ["literal", "number", "array"],
    "tagline": "Terminates a codepage index list.",
    "description": "Each character is mapped to its index in Jelly's codepage, where <code>¡</code> is <code>0</code> and <code>ż</code> is <code>249</code>. For example, <a href='/tio#WyIiLCLigJzCosKkZEnigJgiLCIiLCIiLFtdXQ=='><code>“¢¤dI‘</code></a> evaluates to <code>[1, 3, 100, 73]</code>. Also see <a href='/syntax/begin-string'><code>“</code> (Begin String Literal)</a>."
  },
  {
    "symbol": "’",
    "id": "end-base-250-number",
    "name": "Base 250 Number Terminator",
    "keywords": ["literal", "base250", "compressed", "number", "integer", "close"],
    "tags": ["literal", "number"],
    "tagline": "Terminates a base-250 compressed number.",
    "description": "Each character is mapped to its index in Jelly's codepage, where <code>¡</code> is <code>1</code> and <code>ż</code> is <code>250</code>, and then the digits are evaluated in base 250. For example, <a href='/tio#WyIiLCLigJzhuYRC4bmtL+G4tsKjw57igbvigJkiLCIiLCIiLFtdXQ=='><code>“ṄBṭ/Ḷ£Þ⁻’</code></a> evaluates to <code>12345678901234567890</code>. See the <a href='/misc/integer-compressor?open=1'>integer compression tool</a> for more information and for a tool to automatically compress number literals. Also see <a href='/syntax/begin-string'><code>“</code> (Begin String Literal)</a>."
  },
  {
    "symbol": "”",
    "id": "character-literal",
    "name": "Character Literal",
    "keywords": ["literal", "character", "one", "1", "single"],
    "tags": ["literal", "string"],
    "tagline": "Outside of a string, turn the next character into a literal.",
    "description": "This is a single character literal, so it is a one-character Python <code>str</code> object. Single-character strings in Jelly are a singleton list containing a character. This is also <a href='/syntax/end-string'>String Literal Terminator (<code>”</code>)</a>."
  },
  {
    "symbol": "⁾",
    "id": "two-char-literal",
    "name": "Two Character String Literal",
    "keywords": ["literal", "twocharacters", "string", "pair"],
    "tags": ["literal", "string"],
    "tagline": "Begins a two character string literal; <code>⁾ab</code> is equivalent to <code>“ab”</code>.",
    "description": ""
  },
  {
    "symbol": "⁽",
    "id": "two-char-number-literal",
    "name": "Two Character Base 250 Number Literal",
    "keywords": ["literal", "twocharacters", "number", "pair"],
    "tags": ["literal", "number"],
    "tagline": "Begins a two character base-250 number literal.",
    "description": "Each character is mapped to its index in Jelly's codepage, where <code>¡</code> is <code>1</code> and <code>ż</code> is <code>250</code>, and then the digits are evaluated in base 250. If the result is larger than <code>31500</code>, subtract <code>62580</code>; otherwise, add <code>750</code>. This is to avoid wasting space representing numbers that can already be represented in three digits, or <code>1000</code>, which can be represented by <a href='/syntax/exponential'><code>ȷ</code> (Exponential Number Literal)</a>. See the <a href='/misc/integer-compressor?open=1'>integer compression tool</a> for more information and for a tool to automatically compress number literals. Also see <a href='/syntax/begin-string'><code>“</code> (Begin String Literal)</a>."
  },
  {
    "symbol": "ø",
    "id": "start-niladic-chain",
    "name": "Start Niladic Chain",
    "keywords": ["start", "separate", "new", "niladic", "chain", "separator"],
    "tags": ["separator"],
    "tagline": "Begin a separate niladic chain.",
    "description": "See the <a href='/beginners#separators'>beginners' page</a> on chain separators for more information."
  },
  {
    "symbol": "µ",
    "id": "start-monadic-chain",
    "name": "Start Monadic Chain",
    "keywords": ["start", "separate", "new", "monadic", "chain", "separator"],
    "tags": ["separator"],
    "tagline": "Begin a separate monadic chain.",
    "description": "See the <a href='/beginners#separators'>beginners' page</a> on chain separators for more information."
  },
  {
    "symbol": ")",
    "id": "start-monadic-chain-map",
    "name": "Start Niladic Chain and Map",
    "keywords": ["start", "separate", "new", "monadic", "foreach", "map", "chain", "separator"],
    "tags": ["separator"],
    "tagline": "Begin a separate monadic chain and map over the previous chain. Equivalent to <code>µ€</code>.",
    "description": "See the <a href='/beginners#separators'>beginners' page</a> on chain separators for more information."
  },
  {
    "symbol": "ð",
    "id": "start-dyadic-chain",
    "name": "Start Dyadic Chain",
    "keywords": ["start", "separate", "new", "dyadic", "chain", "separator"],
    "tags": ["separator"],
    "tagline": "Begin a separate dyadic chain.",
    "description": "See the <a href='/beginners#separators'>beginners' page</a> on chain separators for more information."
  },
  {
    "symbol": "ɓ",
    "id": "start-reversed-dyadic-chain",
    "name": "Start Reversed Dyadic Chain",
    "keywords": ["start", "separate", "new", "reversed", "swapped", "flipped", "arguments", "dyadic", "chain"],
    "tags": ["separator"],
    "tagline": "Begin a separate dyadic chain with reversed arguments.",
    "description": "See the <a href='/beginners#separators'>beginners' page</a> on chain separators for more information."
  },
  {
    "symbol": "ı",
    "id": "complex",
    "name": "Complex Number Literal",
    "keywords": ["literal", "complex", "number"],
    "tags": ["literal", "number", "complex"],
    "tagline": "<code>xıy</code> returns <code>x + y × 1j</code>. <code>x</code> defaults to <code>0</code> and <code>y</code> to <code>1</code> if missing.",
    "description": "The binding order for number literals is <a href='/syntax/decimal'><code>.</code></a>, <a href='/syntax/negative'><code>-</code></a>, <a href='/syntax/exponential'><code>ȷ</code></a>, and finally <a href='/syntax/complex'><code>ı</code></a>, so the maximum number of components a number literal can have is <code>-a.bȷ-c.dı-e.fȷ-g.h</code>."
  },
  {
    "symbol": "ȷ",
    "id": "exponential",
    "name": "Exponential Number Literal",
    "keywords": ["literal", "exponential", "number"],
    "tags": ["literal", "number"],
    "tagline": "<code>xȷy</code> returns <code>x × 10<sup>y</sup></code>. <code>x</code> defaults to <code>1</code> and <code>y</code> to <code>3</code> if missing.",
    "description": "The binding order for number literals is <a href='/syntax/decimal'><code>.</code></a>, <a href='/syntax/negative'><code>-</code></a>, <a href='/syntax/exponential'><code>ȷ</code></a>, and finally <a href='/syntax/complex'><code>ı</code></a>, so the maximum number of components a number literal can have is <code>-a.bȷ-c.dı-e.fȷ-g.h</code>."
  },
  {
    "symbol": "-",
    "id": "negative",
    "name": "Negative Number Literal",
    "keywords": ["literal", "negative", "number"],
    "tags": ["literal", "number"],
    "tagline": "Negate a number literal. Without a value, <code>-</code> defaults to <code>-1</code>.",
    "description": "The binding order for number literals is <a href='/syntax/decimal'><code>.</code></a>, <a href='/syntax/negative'><code>-</code></a>, <a href='/syntax/exponential'><code>ȷ</code></a>, and finally <a href='/syntax/complex'><code>ı</code></a>, so the maximum number of components a number literal can have is <code>-a.bȷ-c.dı-e.fȷ-g.h</code>."
  },
  {
    "symbol": ".",
    "id": "decimal",
    "name": "Floating-Point Number Literal",
    "keywords": ["literal", "decimal", "floating", "point", "number"],
    "tags": ["literal", "number"],
    "tagline": "Floating point decimal. <code>.y</code> is equivalent to <code>0.y</code> and <code>x.</code> is equivalent to <code>x.5</code>.",
    "description": "The binding order for number literals is <a href='/syntax/decimal'><code>.</code></a>, <a href='/syntax/negative'><code>-</code></a>, <a href='/syntax/exponential'><code>ȷ</code></a>, and finally <a href='/syntax/complex'><code>ı</code></a>, so the maximum number of components a number literal can have is <code>-a.bȷ-c.dı-e.fȷ-g.h</code>."
  },
  {
    "symbol": ",",
    "id": "list-literal-separator",
    "name": "List Literal Separator",
    "keywords": ["literal", "array", "list", "separator"],
    "tags": ["literal", "array"],
    "tagline": "If the left and right side are both literals with no spaces before/after <code>,</code>, separate elements in a list literal. Otherwise, it will be treated as <a href='/atoms/pair'><code>,</code> (Pair)</a>.",
    "description": ""
  },
  {
    "symbol": "[",
    "id": "begin-list-literal",
    "name": "Begin List Literal",
    "keywords": ["literal", "array", "list", "begin", "start"],
    "tags": ["literal", "array"],
    "tagline": "Begin a comma-separated list literal. These are not required for a depth-1 literal, but can nest.",
    "description": "<code>[1,2]</code> is equivalent to <code>1,2</code>. You can nest these to create multidimensional lists (such as <code>[1,0],[0,1]</code> for the 2×2 identity matrix) or create singleton lists (such as <code>[1]</code>). Square brackets must be balanced. Note that <code>[]</code> doesn't work; instead, use <code>“”</code> or <a href='/atoms/chain-left'><code>⁸</code> (Chain Left Argument / Empty List)</a> if in a niladic chain."
  },
  {
    "symbol": "]",
    "id": "end-list-literal",
    "name": "End List Literal",
    "keywords": ["literal", "array", "list", "end", "stop"],
    "tags": ["literal", "array"],
    "tagline": "End a comma-separated list literal. These are not required for a depth-1 literal, but can nest.",
    "description": "<code>[1,2]</code> is equivalent to <code>1,2</code>. You can nest these to create multidimensional lists (such as <code>[1,0],[0,1]</code> for the 2×2 identity matrix) or create singleton lists (such as <code>[1]</code>). Square brackets must be balanced. Note that <code>[]</code> doesn't work; instead, use <code>“”</code> or <a href='/atoms/chain-left'><code>⁸</code> (Chain Left Argument / Empty List)</a> if in a niladic chain."
  }
]
